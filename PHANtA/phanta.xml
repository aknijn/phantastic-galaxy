<tool id="phanta" name="PHANtA" version="3.0">
    <description>Trimming, Assembly, QUAST</description>
    <requirements>
        <requirement type="package" version="3.10">python</requirement>
        <requirement type="package" version="8.3">mysql-connector-python</requirement>
        <requirement type="package" version="5.0">pyodbc</requirement>
        <requirement type="package" version="5.0">configparser</requirement>
        <requirement type="package" version="5.32">perl</requirement>
        <requirement type="package" version="1.7">perl-bioperl</requirement>
        <requirement type="package" version="2.5.2">bowtie2</requirement>
        <requirement type="package" version="1.3.1">samtools</requirement>
        <requirement type="package" version="1.3.1">bcftools</requirement>
        <requirement type="package" version="0.23.4">fastp</requirement>
        <requirement type="package" version="3.15">spades</requirement>
        <requirement type="package" version="1.23">pilon</requirement>
        <requirement type="package" version="5.2.0">quast</requirement>
        <requirement type="package">ncurses</requirement>
    </requirements>
    <!-- basic error handling -->
    <stdio>
        <!-- Assume anything other than zero is an error -->
        <exit_code range="1:" level="fatal" description="Tool exception" />
        <exit_code range=":-1" level="fatal" description="Tool exception" />
    </stdio>
    <command>
<![CDATA[
        #if str( $input_pc.reverse.name ) == "dummy.fastq":
            python
            $__tool_directory__/PHANtA-S.py  
                --input1 ${input_pc.forward}
                --genomeSize $genomeSize
                --input_id $input_id
                --contigs $phanta_contigs
                --json $phanta_json
                --quast $phanta_quast
        #else
            #if str( $input_pc.forward.name ) == "dummy.fastq":
                python
                $__tool_directory__/PHANtA-S.py  
                    --input1 ${input_pc.reverse}
                    --genomeSize $genomeSize
                    --input_id $input_id
                    --contigs $phanta_contigs
                    --json $phanta_json
                    --quast $phanta_quast
            #else
                perl
                $__tool_directory__/PHANtA.pl ${input_pc.forward} ${input_pc.reverse} $input_id $genomeSize $phanta_contigs $phanta_json $phanta_quast
                  "python $__tool_directory__/PHANtA.py
                  -s '$species'
                  -g $genomeSize
                  -f fastq_1.fastq.gz fastq_2.fastq.gz
                  -o output_dir
                  --threads \${GALAXY_SLOTS:-4}
                  --doNotUseProvidedSoftware
                  --trueConfigFile $__tool_directory__/modules/trueCoverage_rematch/$trueConfigFile
                  --skipFastQC
                  --skipTrimmomatic
                  --spadesMaxMemory 14
                  --spadesMinCoverageAssembly 2
                  --spadesMinKmerCovContigs 2
                  --spadesDefaultKmers
                  --spadesMinContigsLength 100
                  --skipMLST
                  --noGitInfo
                  --doNotSearchAdapters
                  --estimatedMinimumCoverage 10
                  "
            #end if
        #end if

]]>
    </command>

    <inputs>
        <param name="species" type="text" label="species name" />
        <param name="genomeSize" type="float" value="5.0" label="Expected genome size in Mb" help="Float" />
        <param name="input_pc" type="data_collection" format="fastqsanger" collection_type="paired" label="Paired-end FASTQ collection" help="Must be of datatype &quot;fastqsanger&quot;" optional="false" />
        <param name="input_id" type="text" label="IRIDA sample code" />
        <param name="trueConfigFile" type="text" label="File species.config with trueCoverage_ReMatCh settings" />
        <param name="contamination" format="txt" type="data" label="Contamination" />
   </inputs>

    <!-- define outputs -->
    <outputs>
        <data format="fasta" name="phanta_contigs" label="${tool.name} on ${on_string}: assembly" />
        <data format="json" name="phanta_json" label="${tool.name} on ${on_string}: coverage" ></data>
        <data format="tsv" name="phanta_quast" label="${tool.name} on ${on_string}: report" />
   </outputs>
</tool>
