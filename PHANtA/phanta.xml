<tool id="phanta" name="PHANtA" version="2.3">
    <description>Trimming, Assembly, QUAST</description>
    <requirements>
        <requirement type="package" version="3.7">python</requirement>
        <requirement type="package" version="8.0">mysql-connector-python</requirement>
        <requirement type="package" version="5.0">configparser</requirement>
        <requirement type="package" version="5.26.2">perl</requirement>
        <requirement type="package" version="1.7">perl-bioperl</requirement>
        <requirement type="package" version="2.3.4">bowtie2</requirement>
        <requirement type="package" version="1.3.1">samtools</requirement>
        <requirement type="package" version="1.3.1">bcftools</requirement>
        <requirement type="package" version="0.23.2">fastp</requirement>
        <requirement type="package" version="3.15">spades</requirement>
        <requirement type="package" version="1.23">pilon</requirement>
        <requirement type="package" version="5.0.2">quast</requirement>
        <requirement type="package" version="2020.2">tbb</requirement>
        <requirement type="package">ncurses</requirement>
    </requirements>
    <!-- basic error handling -->
    <stdio>
        <!-- Assume anything other than zero is an error -->
        <exit_code range="1:" level="fatal" description="Tool exception" />
        <exit_code range=":-1" level="fatal" description="Tool exception" />
    </stdio>
    <command>
<![CDATA[
    echo "$output_pc.forward.name";
    echo "$output_pc2.forward.name";
    echo "$output_pc.reverse.name";
    echo "$output_pc2.reverse.name";
    cat ${input_pc.forward} > ${output_pc.forward} &&
    cat ${input_pc.reverse} > ${output_pc.reverse} &&
    #if str( $input_pc.reverse.name ) == "dummy.fastq":
        python
        $__tool_directory__/PHANtA-S.py  
            --input1 ${input_pc.forward}
            --genomeSize $genomeSize
            --input_id $input_id
            --contigs $phanta_contigs
            --json $phanta_json
            --quast $phanta_quast
    #else
        #if str( $input_pc.forward.name ) == "dummy.fastq":
            python
            $__tool_directory__/PHANtA-S.py  
                --input1 ${input_pc.reverse}
                --genomeSize $genomeSize
                --input_id $input_id
                --contigs $phanta_contigs
                --json $phanta_json
                --quast $phanta_quast
        #else
            perl
            $__tool_directory__/PHANtA.pl ${input_pc.forward} ${input_pc.reverse} $input_id $genomeSize $phanta_contigs $phanta_json $phanta_quast
              "python $__tool_directory__/PHANtA.py
              -s '$species'
              -g $genomeSize
              -f fastq_1.fastq.gz fastq_2.fastq.gz
              -o output_dir
              --threads \${GALAXY_SLOTS:-4}
              --doNotUseProvidedSoftware
              --trueConfigFile $__tool_directory__/modules/trueCoverage_rematch/$TrueCoverage.trueConfigFile
              --skipFastQC
			  --skipTrimmomatic
              --spadesMaxMemory 14
              --spadesMinCoverageAssembly 2
              --spadesMinKmerCovContigs 2
              --spadesDefaultKmers
              --spadesMinContigsLength 100
              --skipMLST
              --noGitInfo
              --doNotSearchAdapters
              --estimatedMinimumCoverage 10
              "
        #end if
    #end if
]]>
    </command>

    <inputs>
        <param name="species" type="text" label="species name" />
        <param name="genomeSize" type="float" value="5.0" label="Expected genome size in Mb" help="Float" />
        <param name="input_pc" type="data_collection"  format="fastqsanger" collection_type="paired" label="Paired-end FASTQ collection" help="Must be of datatype &quot;fastqsanger&quot;" optional="false" />
        <param name="input_id" type="text" label="IRIDA sample code" />
        <param name="skipEstimatedCoverage" type="boolean" truevalue="true" falsevalue="false" checked="False" label="Do not estimate coverage depth based on number of sequenced nucleotides and expected genome size" />
        <conditional name="TrueCoverage">
            <param name="skipTrueCoverage" type="boolean" truevalue="true" falsevalue="false" checked="False" label="Do not run trueCoverage_ReMatCh analysis" />
            <when value="false">
                <param name="trueConfigFile" type="text" label="File species.config with trueCoverage_ReMatCh settings" />
            </when>
        </conditional>
   </inputs>

    <!-- define outputs -->
    <outputs>
	    <collection name="output_pc" type="paired" label="${tool.name} on ${on_string}: fastq collection" structured_like="input_pc" inherit_format="true" />
        <collection name="output_pc2" type="paired">
              <element name="forward"><element name="simple_line.fastq" /></element>
              <element name="reverse"><element name="dummy.fastq" /></element>
        </collection>
        <data format="fasta" name="phanta_contigs" label="${tool.name} on ${on_string}: assembly" />
        <data format="json" name="phanta_json" label="${tool.name} on ${on_string}: coverage" ></data>
        <data format="tsv" name="phanta_quast" label="${tool.name} on ${on_string}: report" />
   </outputs>
</tool>
